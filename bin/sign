#!/usr/bin/env node
var prompt = require('prompt');
var timeLocks = require('../conf/timeLocks');
var network = require('../conf/rinkeby');	// Change this as needed. Nothing major needs to change.
var Wallet = require('ethers').Wallet;
var fs = require('fs');
var EthTx = require('ethereumjs-tx');
var Web3 = require('web3');
var web3 = new Web3(); 
var build = require('../dist/contracts');
var abi = JSON.parse(build.contracts['contracts/Sale.sol:Sale'].abi);
var Sale = web3.eth.contract(abi).at(network.sale.address);



prompt.start();
prompt.get({properties: {
				address: {
					required: true
				},
				nonce: {
					require: true
				},
				password: {
					required: true,
					hidden: true
				}
			}	
	}, function (err, result) {
		return new Promise ((resolve ,reject) => {
		if (!err) {
			var encrypted = fs.readFileSync('.keys/' + result.address.toLowerCase() + '.json', 'utf-8');
			Wallet.fromEncryptedWallet(encrypted, result.password)
			.then(function (wallet) {
				var transactions = [];
				// distribute time locked tokens
				for (var i = 0 ; i < timeLocks.length; i += network.batchsize) {
					var tx = network.txparams;
					tx.nonce = web3.toHex(Number(result.nonce) + i/network.batchsize);
					console.log(web3.toDecimal(tx.nonce));
					tx.gasPrice = web3.toHex(tx.gasPrice);
					tx.gasLimit = web3.toHex(tx.gasLimit);
					tx.to = network.sale.address;
					tx.data = Sale.distributeTimelockedTokens.getData(
									timeLocks.map(el => el[0]).slice(i, i + network.batchsize), // addresses
									timeLocks.map(el => el[1]).slice(i, i + network.batchsize), // tokens
									timeLocks.map(el => el[2]).slice(i, i + network.batchsize), // starts
									timeLocks.map(el => el[3]).slice(i, i + network.batchsize)  // durations
								)
					tx.gas = web3.toHex(tx.gasLimit);

					var Tx = new EthTx(tx);
					Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
					transactions.push('0x' + Tx.serialize().toString('hex'));
				}
					fs.writeFileSync('signedTransactions.json', JSON.stringify(transactions, null, 2));
					resolve();
			})
		} else reject(err);
	})
})

