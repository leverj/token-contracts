#!/usr/bin/env node
var prompt = require('prompt');
var timeLocks = require('../conf/test_timeLocks');
var oldAllocations = require('../conf/oldallocations');
var network = require('../conf/mainnet');	// Change this as needed. Nothing major needs to change.
//var network = require('../conf/rinkeby');
var Wallet = require('ethers').Wallet;
var fs = require('fs');
var BN = require('bn.js');
var EthTx = require('ethereumjs-tx');
var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.HttpProvider('https://rinkeby.infura.io'));
var build = require('../dist/contracts');
var abi = JSON.parse(build.contracts['contracts/Sale.sol:Sale'].abi);
var Sale = web3.eth.contract(abi).at(network.sale.address);
var csv = require('csv-parser');

prompt.start();
prompt.get({properties: {
				address: {
					required: true
				},
				nonce: {
					require: true
				},
				password: {
					required: true,
					hidden: true
				}
			}	
	}, function (err, result) {
		return new Promise ((resolve ,reject) => {
		if (!err) {
			var encrypted = fs.readFileSync('.keys/' + result.address.toLowerCase() + '.json', 'utf-8');
			Wallet.fromEncryptedWallet(encrypted, result.password)
			.then(function (wallet) {
				var preconfigTransactions = [];
				var timelockTransactions = [];
				var whitelistTransactions = [];
				var postconfigTransactions = [];
				var tempNonce = Number(result.nonce);

/*
				// set wallet
				var tx = network.txparams;
				tx.nonce = web3.toHex(tempNonce);
				console.log(web3.toDecimal(tx.nonce));
				tempNonce++;
				tx.gasPrice = web3.toHex(tx.gasPrice);
				tx.gasLimit = web3.toHex(tx.gasLimit);
				tx.to = network.sale.address;
				tx.data = Sale.configureWallet.getData(network.wallet);
				tx.gas = web3.toHex(tx.gasLimit);
				var Tx = new EthTx(tx);
				Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
				preconfigTransactions.push('0x' + Tx.serialize().toString('hex'));
				console.log('0x' + Tx.serialize().toString('hex'));
				console.log(tx);

				// allocate presale
				var tx = network.txparams;
				tx.nonce = web3.toHex(tempNonce);
				console.log(web3.toDecimal(tx.nonce));
				tempNonce++;
				tx.gasPrice = web3.toHex(tx.gasPrice);
				tx.gasLimit = web3.toHex(tx.gasLimit);
				tx.to = network.sale.address;
				var beneficiaries =[network.presaleAddress];
				var amounts = [network.presaleAmount];
				tx.data = Sale.distributePresaleTokens.getData(beneficiaries, amounts);
				tx.gas = web3.toHex(tx.gasLimit);
				var Tx = new EthTx(tx);
				Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
				preconfigTransactions.push('0x' + Tx.serialize().toString('hex'));*/
/*
				console.log('starting timelocks');
				// distribute time locked tokens
				for (var i = 0 ; i < timeLocks.length; i += network.batchsize) {
					var tx = network.txparams;
					tx.nonce = tempNonce;
					tempNonce++;
					console.log(web3.toDecimal(tx.nonce));
					tx.gasPrice = web3.toHex(tx.gasPrice);
					tx.gasLimit = web3.toHex(tx.gasLimit);
					tx.to = network.sale.address;
					tx.data = Sale.distributeTimelockedTokens.getData(
									timeLocks.map(el => el[0]).slice(i, i + network.batchsize), // addresses
									timeLocks.map(el => el[1]).slice(i, i + network.batchsize), // tokens
									timeLocks.map(el => el[2]).slice(i, i + network.batchsize), // starts
									timeLocks.map(el => el[3]).slice(i, i + network.batchsize)  // durations
								)
					tx.gas = web3.toHex(tx.gasLimit);
					var Tx = new EthTx(tx);
					Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
					timelockTransactions.push('0x' + Tx.serialize().toString('hex'));
				}*/

	/*
				console.log('starting old allocations');
				// token balance migrations
				for (var i = 0 ; i < oldAllocations.length; i ++) {
					console.log(JSON.stringify(oldAllocations[i]));
					var tx = network.txparams;
					tx.nonce = web3.toHex(tempNonce);
					tempNonce++;
					console.log(web3.toDecimal(tx.nonce));
					tx.gasPrice = web3.toHex(tx.gasPrice);
					tx.gasLimit = web3.toHex(tx.gasLimit);
					tx.to = network.sale.address;
					adddressToUse = oldAllocations[i][0];
					amountToSend = Number(oldAllocations[i][1]);
					tx.data = Sale.distributePresaleTokens.getData([adddressToUse], [amountToSend]);
					tx.gas = web3.toHex(tx.gasLimit);
					var Tx = new EthTx(tx);
					Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
					timelockTransactions.push('0x' + Tx.serialize().toString('hex'));
				}

			*/	
				// whitelisters


/*
				var tempCount = 0;
				var addresses = [];
				var whitelistAmounts = [];
				fs.createReadStream('./conf/results-20171103-054519_FINAL.csv')
				  .pipe(csv())
				  .on('data', function (data) {
				    console.log('Address: %s Amount: %s', data.eth_address, data.amount);
			    	addresses.push(data.eth_address);
			    	
			    	//let factor = (1000000000000000000/333333);
			    	let whitelistAmountInSubtokens = Math.ceil(3000003000003 * data.amount);
			    	whitelistAmounts.push(whitelistAmountInSubtokens);

				    console.log('conversion amounts %s ETH for %s subLEVs', data.amount, whitelistAmountInSubtokens);

			    	if(addresses.length == network.batchsize){
						let tx = network.txparams;
						tx.nonce = web3.toHex(tempNonce);
						console.log(web3.toDecimal(tx.nonce));
						tempNonce++;
						tx.gasPrice = web3.toHex(tx.gasPrice);
						tx.gasLimit = web3.toHex(tx.gasLimit);
						tx.to = network.sale.address;
						tx.data = Sale.addWhitelist.getData(addresses, whitelistAmounts);
						tx.gas = web3.toHex(tx.gasLimit);
						let Tx = new EthTx(tx);
						Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
						whitelistTransactions.push('0x' + Tx.serialize().toString('hex'));
			    		addresses = [];
			    		whitelistAmounts = [];
			    	}
				  }).on('end', function () {  // done
    				fs.writeFileSync('./dist/signedWhitelistTransactions.json', JSON.stringify(whitelistTransactions, null, 2));
  				  });*/

				/*var tempCount = 0;
				var addresses = [];
				var whitelistAmounts = [];
				fs.createReadStream('./conf/test_whitelist.csv')
				  .pipe(csv())
				  .on('data', function (data) {
				    console.log('Address: %s Amount: %s', data.eth_address, data.amount);
			    	addresses.push(data.eth_address);
			    	//let factor = (1000000000000000000/333333);
			    	let whitelistAmountInSubtokens = Math.ceil(3000003000003 * data.amount);
			    	whitelistAmounts.push(whitelistAmountInSubtokens);

				    console.log('conversion amounts %s ETH for %s subLEVs', data.amount, whitelistAmountInSubtokens);

			    	if(addresses.length == 1){
						let tx = network.txparams;
						tx.nonce = web3.toHex(tempNonce);
						console.log(web3.toDecimal(tx.nonce));
						tempNonce++;
						tx.gasPrice = web3.toHex(tx.gasPrice);
						tx.gasLimit = web3.toHex(tx.gasLimit);
						tx.to = network.sale.address;
						tx.data = Sale.addWhitelist.getData(addresses, whitelistAmounts);
						tx.gas = web3.toHex(tx.gasLimit);
						let Tx = new EthTx(tx);
						Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
						whitelistTransactions.push('0x' + Tx.serialize().toString('hex'));
			    		addresses = [];
			    		whitelistAmounts = [];
			    	}
				  }).on('end', function () {  // done
    				fs.writeFileSync('./dist/signedTestWhitelistTransactions.json', JSON.stringify(whitelistTransactions, null, 2));
  				  	resolve();
  				  });*/
  				 
				// setup complete
				/*var tx = network.txparams;
				tx.nonce = web3.toHex(Number(tempNonce));
				console.log(web3.toDecimal(tx.nonce));
				tempNonce++;
				tx.gasPrice = web3.toHex(tx.gasPrice);
				tx.gasLimit = web3.toHex(tx.gasLimit);
				tx.to = network.sale.address;
				tx.data = Sale.setSetupComplete.getData();
				tx.gas = web3.toHex(tx.gasLimit);
				var Tx = new EthTx(tx);
				Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
				postconfigTransactions.push('0x' + Tx.serialize().toString('hex'));
*/

				// enable public sale
				var tx = network.txparams;
				tx.nonce = web3.toHex(Number(tempNonce));
				console.log(web3.toDecimal(tx.nonce));
				tempNonce++;
				tx.gasPrice = web3.toHex(tx.gasPrice);
				tx.gasLimit = web3.toHex(tx.gasLimit);
				tx.to = network.sale.address;
				tx.data = Sale.startPublicSale.getData();
				tx.gas = web3.toHex(tx.gasLimit);
				var Tx = new EthTx(tx);
				Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
				postconfigTransactions.push('0x' + Tx.serialize().toString('hex'));		

/*
				// emergency
				var tx = network.txparams;
				tx.nonce = web3.toHex(Number(tempNonce));
				console.log(web3.toDecimal(tx.nonce));
				tempNonce++;
				tx.gasPrice = web3.toHex(tx.gasPrice);
				tx.gasLimit = web3.toHex(tx.gasLimit);
				tx.to = network.sale.address;
				tx.data = Sale.emergencyToggle.getData();
				tx.gas = web3.toHex(tx.gasLimit);
				var Tx = new EthTx(tx);
				Tx.sign(new Buffer(wallet.privateKey.slice(2), 'hex'));
				postconfigTransactions.push('0x' + Tx.serialize().toString('hex'));*/
				
				//fs.writeFileSync('./dist/signedPreconfigTransactions.json', JSON.stringify(preconfigTransactions, null, 2));
				//fs.writeFileSync('./dist/signedTimelockTransactions.json', JSON.stringify(timelockTransactions, null, 2));
				fs.writeFileSync('./dist/signedPostconfigTransactions.json', JSON.stringify(postconfigTransactions, null, 2));
			})
		} else reject(err);
	})
})

